{
  "love": {
    "audio": {
      "getActiveSourceCount": {
        "description": "Gets the current number of simultaneously playing sources.",
        "snippet": "getActiveSourceCount()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getActiveSourceCount",
        "name": "getActiveSourceCount"
      },
      "getDistanceModel": {
        "description": "Returns the distance attenuation model.",
        "snippet": "getDistanceModel()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getDistanceModel",
        "name": "getDistanceModel"
      },
      "getDopplerScale": {
        "description": "Gets the current global scale factor for velocity-based doppler effects.",
        "snippet": "getDopplerScale()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getDopplerScale",
        "name": "getDopplerScale"
      },
      "getOrientation": {
        "description": "Returns the orientation of the listener.",
        "snippet": "getOrientation()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getOrientation",
        "name": "getOrientation"
      },
      "getPosition": {
        "description": "Returns the position of the listener.",
        "snippet": "getPosition()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getPosition",
        "name": "getPosition"
      },
      "getSourceCount": {
        "description": "Returns the number of sources which are currently playing or paused.",
        "snippet": "getSourceCount()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getSourceCount",
        "name": "getSourceCount"
      },
      "getVelocity": {
        "description": "Returns the velocity of the listener.",
        "snippet": "getVelocity()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getVelocity",
        "name": "getVelocity"
      },
      "getVolume": {
        "description": "Returns the master volume.",
        "snippet": "getVolume()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.getVolume",
        "name": "getVolume"
      },
      "newSource": {
        "description": "Creates a new Source from a file or SoundData. Sources created from SoundData are always static.",
        "snippet": "newSource(${1:filename}, ${2:type})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.newSource",
        "name": "newSource"
      },
      "pause": {
        "description": "Pauses currently played Sources.",
        "snippet": "pause()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.pause",
        "name": "pause"
      },
      "play": {
        "description": "Plays the specified Source.",
        "snippet": "play(${1:source})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.play",
        "name": "play"
      },
      "resume": {
        "description": "Resumes all audio",
        "snippet": "resume()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.resume",
        "name": "resume"
      },
      "rewind": {
        "description": "Rewinds all playing audio.",
        "snippet": "rewind()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.rewind",
        "name": "rewind"
      },
      "setDistanceModel": {
        "description": "Sets the distance attenuation model.",
        "snippet": "setDistanceModel(${1:model})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setDistanceModel",
        "name": "setDistanceModel"
      },
      "setDopplerScale": {
        "description": "Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.",
        "snippet": "setDopplerScale(${1:scale})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setDopplerScale",
        "name": "setDopplerScale"
      },
      "setOrientation": {
        "description": "Sets the orientation of the listener.",
        "snippet": "setOrientation(${1:fx}, ${2:fy}, ${3:fz}, ${4:ux}, ${5:uy}, ${6:uz})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setOrientation",
        "name": "setOrientation"
      },
      "setPosition": {
        "description": "Sets the position of the listener, which determines how sounds play.",
        "snippet": "setPosition(${1:x}, ${2:y}, ${3:z})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setPosition",
        "name": "setPosition"
      },
      "setVelocity": {
        "description": "Sets the velocity of the listener.",
        "snippet": "setVelocity(${1:x}, ${2:y}, ${3:z})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setVelocity",
        "name": "setVelocity"
      },
      "setVolume": {
        "description": "Sets the master volume.",
        "snippet": "setVolume(${1:volume})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.setVolume",
        "name": "setVolume"
      },
      "stop": {
        "description": "Stops currently played sources.",
        "snippet": "stop()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.audio.stop",
        "name": "stop"
      }
    },
    "event": {
      "clear": {
        "description": "Clears the event queue.",
        "snippet": "clear()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.clear",
        "name": "clear"
      },
      "poll": {
        "description": "Returns an iterator for messages in the event queue.",
        "snippet": "poll()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.poll",
        "name": "poll"
      },
      "pump": {
        "description": "Pump events into the event queue. This is a low-level function, and is usually not called by the user, but by love.run. Note that this does need to be called for any OS to think you're still running, and if you want to handle OS-generated events at all (think callbacks). love.event.pump can only be called from the main thread, but afterwards, the rest of love.event can be used from any other thread.",
        "snippet": "pump()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.pump",
        "name": "pump"
      },
      "push": {
        "description": "Adds an event to the event queue.",
        "snippet": "push(${1:e}, ${2:a}, ${3:b}, ${4:c}, ${5:d})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.push",
        "name": "push"
      },
      "quit": {
        "description": "Adds the quit event to the queue.\n\nThe quit event is a signal for the event handler to close L\u00d6VE. It's possible to abort the exit process with the love.quit callback.",
        "snippet": "quit()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.quit",
        "name": "quit"
      },
      "wait": {
        "description": "Like love.event.poll but blocks until there is an event in the queue.",
        "snippet": "wait()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.event.wait",
        "name": "wait"
      }
    },
    "filesystem": {
      "append": {
        "description": "Append data to an existing file.",
        "snippet": "append(${1:name}, ${2:data}, ${3:size})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.append",
        "name": "append"
      },
      "areSymlinksEnabled": {
        "description": "Gets whether love.filesystem follows symbolic links.",
        "snippet": "areSymlinksEnabled()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.areSymlinksEnabled",
        "name": "areSymlinksEnabled"
      },
      "createDirectory": {
        "description": "Creates a directory.",
        "snippet": "createDirectory(${1:name})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.createDirectory",
        "name": "createDirectory"
      },
      "getAppdataDirectory": {
        "description": "Returns the application data directory (could be the same as getUserDirectory)",
        "snippet": "getAppdataDirectory()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getAppdataDirectory",
        "name": "getAppdataDirectory"
      },
      "getCRequirePath": {
        "description": "Gets the filesystem paths that will be searched for c libraries when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.) Additionally, any occurrence of a double question mark (\"??\") will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
        "snippet": "getCRequirePath()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getCRequirePath",
        "name": "getCRequirePath"
      },
      "getDirectoryItems": {
        "description": "Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.\n\nIf the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.",
        "snippet": "getDirectoryItems(${1:dir})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getDirectoryItems",
        "name": "getDirectoryItems"
      },
      "getIdentity": {
        "description": "Gets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full location.",
        "snippet": "getIdentity(${1:name})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getIdentity",
        "name": "getIdentity"
      },
      "getInfo": {
        "description": "Gets information about the specified file or directory.",
        "snippet": "getInfo(${1:path})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getInfo",
        "name": "getInfo"
      },
      "getRealDirectory": {
        "description": "Gets the platform-specific absolute path of the directory containing a filepath.\n\nThis can be used to determine whether a file is inside the save directory or the game's source .love.",
        "snippet": "getRealDirectory(${1:filepath})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getRealDirectory",
        "name": "getRealDirectory"
      },
      "getRequirePath": {
        "description": "Gets the filesystem paths that will be searched when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
        "snippet": "getRequirePath()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getRequirePath",
        "name": "getRequirePath"
      },
      "getSaveDirectory": {
        "description": "Gets the full path to the designated save directory. This can be useful if you want to use the standard io library (or something else) to read or write in the save directory.",
        "snippet": "getSaveDirectory()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getSaveDirectory",
        "name": "getSaveDirectory"
      },
      "getSource": {
        "description": "Returns the full path to the the .love file or directory. If the game is fused to the L\u00d6VE executable, then the executable is returned.",
        "snippet": "getSource()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getSource",
        "name": "getSource"
      },
      "getSourceBaseDirectory": {
        "description": "Returns the full path to the directory containing the .love file. If the game is fused to the L\u00d6VE executable, then the directory containing the executable is returned.\n\nIf love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game readable by love.filesystem.",
        "snippet": "getSourceBaseDirectory()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory",
        "name": "getSourceBaseDirectory"
      },
      "getUserDirectory": {
        "description": "Returns the path of the user's directory.",
        "snippet": "getUserDirectory()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getUserDirectory",
        "name": "getUserDirectory"
      },
      "getWorkingDirectory": {
        "description": "Gets the current working directory.",
        "snippet": "getWorkingDirectory()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.getWorkingDirectory",
        "name": "getWorkingDirectory"
      },
      "init": {
        "description": "Initializes love.filesystem, will be called internally, so should not be used explicitly.",
        "snippet": "init(${1:appname})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.init",
        "name": "init"
      },
      "isFused": {
        "description": "Gets whether the game is in fused mode or not.\n\nIf a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.\n\nA game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if \"--fused\" has been given as a command-line argument when starting the game.",
        "snippet": "isFused()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.isFused",
        "name": "isFused"
      },
      "lines": {
        "description": "Iterate over the lines in a file.",
        "snippet": "lines(${1:name})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.lines",
        "name": "lines"
      },
      "load": {
        "description": "Loads a Lua file (but does not run it).",
        "snippet": "load(${1:name}, ${2:errormsg})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.load",
        "name": "load"
      },
      "mount": {
        "description": "Mounts a zip file or folder in the game's save directory for reading.",
        "snippet": "mount(${1:archive}, ${2:mountpoint})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.mount",
        "name": "mount"
      },
      "newFile": {
        "description": "Creates a new File object. It needs to be opened before it can be accessed.",
        "snippet": "newFile(${1:filename}, ${2:mode})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.newFile",
        "name": "newFile"
      },
      "newFileData": {
        "description": "Creates a new FileData object.",
        "snippet": "newFileData(${1:contents}, ${2:name}, ${3:decoder})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.newFileData",
        "name": "newFileData"
      },
      "read": {
        "description": "Read the contents of a file.",
        "snippet": "read(${1:name}, ${2:bytes})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.read",
        "name": "read"
      },
      "remove": {
        "description": "Removes a file or directory.",
        "snippet": "remove(${1:name})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.remove",
        "name": "remove"
      },
      "setCRequirePath": {
        "description": "Sets the filesystem paths that will be searched for c libraries when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.) Additionally, any occurrence of a double question mark (\"??\") will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
        "snippet": "setCRequirePath(${1:paths})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.setCRequirePath",
        "name": "setCRequirePath"
      },
      "setIdentity": {
        "description": "Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location.",
        "snippet": "setIdentity(${1:name}, ${2:appendToPath})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.setIdentity",
        "name": "setIdentity"
      },
      "setRequirePath": {
        "description": "Sets the filesystem paths that will be searched when require is called.\n\nThe paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
        "snippet": "setRequirePath(${1:paths})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.setRequirePath",
        "name": "setRequirePath"
      },
      "setSource": {
        "description": "Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by L\u00d6VE.",
        "snippet": "setSource(${1:path})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.setSource",
        "name": "setSource"
      },
      "setSymlinksEnabled": {
        "description": "Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2.",
        "snippet": "setSymlinksEnabled(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.setSymlinksEnabled",
        "name": "setSymlinksEnabled"
      },
      "unmount": {
        "description": "Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount.",
        "snippet": "unmount(${1:archive})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.unmount",
        "name": "unmount"
      },
      "write": {
        "description": "Write data to a file.\n\nIf you are getting the error message \"Could not set write directory\", try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf.",
        "snippet": "write(${1:name}, ${2:data}, ${3:size})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.filesystem.write",
        "name": "write"
      }
    },
    "getVersion": {
      "description": "Gets the current running version of L\u00d6VE.",
      "snippet": "getVersion()",
      "type": "function",
      "url": "https://love2d.org/wiki/love.getVersion",
      "name": "getVersion"
    },
    "graphics": {
      "applyTransform": {
        "description": "Applies the given Transform object to the current coordinate transformation.\n\nThis effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.",
        "snippet": "applyTransform(${1:transform})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.applyTransform",
        "name": "applyTransform"
      },
      "arc": {
        "description": "Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.",
        "snippet": "arc(${1:drawmode}, ${2:x}, ${3:y}, ${4:radius}, ${5:angle1}, ${6:angle2}, ${7:segments})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.arc",
        "name": "arc"
      },
      "captureScreenshot": {
        "description": "Creates a screenshot once the current frame is done (after love.draw has finished).\n\nSince this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.",
        "snippet": "captureScreenshot(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.captureScreenshot",
        "name": "captureScreenshot"
      },
      "circle": {
        "description": "Draws a circle.",
        "snippet": "circle(${1:mode}, ${2:x}, ${3:y}, ${4:radius})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.circle",
        "name": "circle"
      },
      "clear": {
        "description": "Clears the screen to the background color in L\u00d6VE 0.9.2 and earlier, or to the specified color in 0.10.0 and newer.\n\nThis function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.\n\nNote that the scissor area bounds the cleared region.",
        "snippet": "clear()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.clear",
        "name": "clear"
      },
      "discard": {
        "description": "Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.\n\nIf the active Canvas has just been changed and the \"replace\" BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.\n\nOn some desktop systems this function may do nothing.",
        "snippet": "discard(${1:discardcolor}, ${2:discardstencil})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.discard",
        "name": "discard"
      },
      "draw": {
        "description": "Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.\n\nObjects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.\n\nIt's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline.\n\nNote that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.\n\nThe right and bottom edges of the object are shifted at an angle defined by the shearing factors.",
        "snippet": "draw(${1:drawable}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.draw",
        "name": "draw"
      },
      "drawInstanced": {
        "description": "Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.\n\nEach instance can have unique properties (positions, colors, etc.) but will not by default unless a custom Shader along with either per-instance attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.\n\nInstancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.",
        "snippet": "drawInstanced(${1:mesh}, ${2:instancecount}, ${3:x}, ${4:y}, ${5:r}, ${6:sx}, ${7:sy}, ${8:ox}, ${9:oy}, ${10:kx}, ${11:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.drawInstanced",
        "name": "drawInstanced"
      },
      "drawLayer": {
        "description": "Draws a layer of an Array Texture.",
        "snippet": "drawLayer(${1:texture}, ${2:layerindex}, ${3:x}, ${4:y}, ${5:r}, ${6:sx}, ${7:sy}, ${8:ox}, ${9:oy}, ${10:kx}, ${11:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.drawLayer",
        "name": "drawLayer"
      },
      "ellipse": {
        "description": "Draws an ellipse.",
        "snippet": "ellipse(${1:mode}, ${2:x}, ${3:y}, ${4:radiusx}, ${5:radiusy})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.ellipse",
        "name": "ellipse"
      },
      "flushBatch": {
        "description": "Immediately renders any pending automatically batched draws.\n\nL\u00d6VE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.\n\nThe current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch.\n\nSpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws.",
        "snippet": "flushBatch()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.flushBatch",
        "name": "flushBatch"
      },
      "getBackgroundColor": {
        "description": "Gets the current background color.",
        "snippet": "getBackgroundColor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getBackgroundColor",
        "name": "getBackgroundColor"
      },
      "getBlendMode": {
        "description": "Gets the blending mode.",
        "snippet": "getBlendMode()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getBlendMode",
        "name": "getBlendMode"
      },
      "getCanvas": {
        "description": "Gets the current target Canvas.",
        "snippet": "getCanvas()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getCanvas",
        "name": "getCanvas"
      },
      "getCanvasFormats": {
        "description": "Gets the available Canvas formats, and whether each is supported.",
        "snippet": "getCanvasFormats()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getCanvasFormats",
        "name": "getCanvasFormats"
      },
      "getColor": {
        "description": "Gets the current color.",
        "snippet": "getColor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getColor",
        "name": "getColor"
      },
      "getColorMask": {
        "description": "Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.\n\nThe color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well.",
        "snippet": "getColorMask()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getColorMask",
        "name": "getColorMask"
      },
      "getCompressedImageFormats": {
        "description": "Gets the available compressed image formats, and whether each is supported.",
        "snippet": "getCompressedImageFormats()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getCompressedImageFormats",
        "name": "getCompressedImageFormats"
      },
      "getDefaultFilter": {
        "description": "Returns the default scaling filters used with Images, Canvases, and Fonts.",
        "snippet": "getDefaultFilter()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getDefaultFilter",
        "name": "getDefaultFilter"
      },
      "getDepthMode": {
        "description": "Gets the current depth test mode and whether writing to the depth buffer is enabled.\n\nThis is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.",
        "snippet": "getDepthMode()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getDepthMode",
        "name": "getDepthMode"
      },
      "getDimensions": {
        "description": "Gets the width and height of the window.",
        "snippet": "getDimensions()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getDimensions",
        "name": "getDimensions"
      },
      "getFont": {
        "description": "Gets the current Font object.",
        "snippet": "getFont()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getFont",
        "name": "getFont"
      },
      "getFrontFaceWinding": {
        "description": "Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.",
        "snippet": "getFrontFaceWinding()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getFrontFaceWinding",
        "name": "getFrontFaceWinding"
      },
      "getHeight": {
        "description": "Gets the height of the window.",
        "snippet": "getHeight()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getHeight",
        "name": "getHeight"
      },
      "getLineJoin": {
        "description": "Gets the line join style.",
        "snippet": "getLineJoin()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getLineJoin",
        "name": "getLineJoin"
      },
      "getLineStyle": {
        "description": "Gets the line style.",
        "snippet": "getLineStyle()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getLineStyle",
        "name": "getLineStyle"
      },
      "getLineWidth": {
        "description": "Gets the current line width.",
        "snippet": "getLineWidth()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getLineWidth",
        "name": "getLineWidth"
      },
      "getMeshCullMode": {
        "description": "Gets whether back-facing triangles in a Mesh are culled.\n\nMesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.",
        "snippet": "getMeshCullMode()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getMeshCullMode",
        "name": "getMeshCullMode"
      },
      "getPointSize": {
        "description": "Gets the point size.",
        "snippet": "getPointSize()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getPointSize",
        "name": "getPointSize"
      },
      "getRendererInfo": {
        "description": "Gets information about the system's video card and drivers.",
        "snippet": "getRendererInfo()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getRendererInfo",
        "name": "getRendererInfo"
      },
      "getScissor": {
        "description": "Gets the current scissor box.",
        "snippet": "getScissor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getScissor",
        "name": "getScissor"
      },
      "getShader": {
        "description": "Returns the current Shader. Returns nil if none is set.",
        "snippet": "getShader()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getShader",
        "name": "getShader"
      },
      "getStackDepth": {
        "description": "Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).",
        "snippet": "getStackDepth()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getStackDepth",
        "name": "getStackDepth"
      },
      "getStats": {
        "description": "Gets performance-related rendering statistics.",
        "snippet": "getStats()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getStats",
        "name": "getStats"
      },
      "getStencilTest": {
        "description": "Gets whether stencil testing is enabled.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn will be clipped / stencilled out based on whether it intersects with what has been previously drawn to the stencil buffer.\n\nEach Canvas has its own stencil buffer.",
        "snippet": "getStencilTest()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getStencilTest",
        "name": "getStencilTest"
      },
      "getSupported": {
        "description": "Gets the optional graphics features and whether they're supported on the system.\n\nSome older or low-end systems don't always support all graphics features.",
        "snippet": "getSupported()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getSupported",
        "name": "getSupported"
      },
      "getSystemLimits": {
        "description": "Gets the system-dependent maximum values for love.graphics features.",
        "snippet": "getSystemLimits()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getSystemLimits",
        "name": "getSystemLimits"
      },
      "getTextureTypes": {
        "description": "Gets the available texture types, and whether each is supported.",
        "snippet": "getTextureTypes()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getTextureTypes",
        "name": "getTextureTypes"
      },
      "getWidth": {
        "description": "Gets the width of the window.",
        "snippet": "getWidth()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.getWidth",
        "name": "getWidth"
      },
      "intersectScissor": {
        "description": "Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor. If no scissor is active yet, it behaves like love.graphics.setScissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.\n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).",
        "snippet": "intersectScissor(${1:x}, ${2:y}, ${3:width}, ${4:height})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.intersectScissor",
        "name": "intersectScissor"
      },
      "inverseTransformPoint": {
        "description": "Converts the given 2D position from screen-space into global coordinates.\n\nThis effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects.",
        "snippet": "inverseTransformPoint(${1:screenX}, ${2:screenY})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.inverseTransformPoint",
        "name": "inverseTransformPoint"
      },
      "isGammaCorrect": {
        "description": "Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf.\n\nNot all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.",
        "snippet": "isGammaCorrect()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.isGammaCorrect",
        "name": "isGammaCorrect"
      },
      "isWireframe": {
        "description": "Gets whether wireframe mode is used when drawing.",
        "snippet": "isWireframe()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.isWireframe",
        "name": "isWireframe"
      },
      "line": {
        "description": "Draws lines between points.",
        "snippet": "line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.line",
        "name": "line"
      },
      "newCanvas": {
        "description": "Creates a new Canvas object for offscreen rendering.\n\nAntialiased Canvases have slightly higher system requirements than normal Canvases. Additionally, the supported maximum number of MSAA samples varies depending on the system. Use love.graphics.getSystemLimit to check.\n\nIf the number of MSAA samples specified is greater than the maximum supported by the system, the Canvas will still be created but only using the maximum supported amount (this includes 0.)",
        "snippet": "newCanvas(${1:width}, ${2:height}, ${3:format}, ${4:msaa})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newCanvas",
        "name": "newCanvas"
      },
      "newFont": {
        "description": "Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.\n\nAll variants which accept a filename can also accept a Data object instead.",
        "snippet": "newFont(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newFont",
        "name": "newFont"
      },
      "newImage": {
        "description": "Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.",
        "snippet": "newImage(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newImage",
        "name": "newImage"
      },
      "newImageFont": {
        "description": "Creates a new Font by loading a specifically formatted image.\n\nIn versions prior to 0.9.0, L\u00d6VE expects ISO 8859-1 encoding for the glyphs string.",
        "snippet": "newImageFont(${1:filename}, ${2:glyphs})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newImageFont",
        "name": "newImageFont"
      },
      "newMesh": {
        "description": "Creates a new Mesh.\n\nUse Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.",
        "snippet": "newMesh(${1:vertices}, ${2:mode}, ${3:usage})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newMesh",
        "name": "newMesh"
      },
      "newParticleSystem": {
        "description": "Creates a new ParticleSystem.",
        "snippet": "newParticleSystem(${1:texture}, ${2:buffer})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newParticleSystem",
        "name": "newParticleSystem"
      },
      "newQuad": {
        "description": "Creates a new Quad.\n\nThe purpose of a Quad is to describe the result of the following transformation on any drawable object. The object is first scaled to dimensions sw * sh. The Quad then describes the rectangular area of dimensions width * height whose upper left corner is at position (x, y) inside the scaled object.",
        "snippet": "newQuad(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:sw}, ${6:sh})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newQuad",
        "name": "newQuad"
      },
      "newShader": {
        "description": "Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.\n\nVertex shader code must contain at least one function, named position, which is the function that will produce transformed vertex positions of drawn objects in screen-space.\n\nPixel shader code must contain at least one function, named effect, which is the function that will produce the color which is blended onto the screen for each pixel a drawn object touches.",
        "snippet": "newShader(${1:code})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newShader",
        "name": "newShader"
      },
      "newSpriteBatch": {
        "description": "Creates a new SpriteBatch object.",
        "snippet": "newSpriteBatch(${1:texture}, ${2:maxsprites}, ${3:usage})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newSpriteBatch",
        "name": "newSpriteBatch"
      },
      "newText": {
        "description": "Creates a new drawable Text object.",
        "snippet": "newText(${1:font}, ${2:textstring})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newText",
        "name": "newText"
      },
      "newVideo": {
        "description": "Creates a new drawable Video. Currently only Ogg Theora video files are supported.",
        "snippet": "newVideo(${1:filename}, ${2:loadaudio})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.newVideo",
        "name": "newVideo"
      },
      "origin": {
        "description": "Resets the current coordinate transformation.\n\nThis function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults.",
        "snippet": "origin()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.origin",
        "name": "origin"
      },
      "points": {
        "description": "Draws one or more points.",
        "snippet": "points(${1:x}, ${2:y}, ${3:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.points",
        "name": "points"
      },
      "polygon": {
        "description": "Draw a polygon.\n\nFollowing the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.\n\nWhen in fill mode, the polygon must be convex and simple or rendering artifacts may occur.",
        "snippet": "polygon(${1:mode}, ${2:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.polygon",
        "name": "polygon"
      },
      "pop": {
        "description": "Pops the current coordinate transformation from the transformation stack.\n\nThis function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push. For an example, see the description of love.graphics.push.",
        "snippet": "pop()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.pop",
        "name": "pop"
      },
      "present": {
        "description": "Displays the results of drawing operations on the screen.\n\nThis function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function.",
        "snippet": "present()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.present",
        "name": "present"
      },
      "print": {
        "description": "Draws text on screen. If no Font is set, one will be created and set (once) if needed.\n\nAs of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first. If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.\n\nlove.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.",
        "snippet": "print(${1:text}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.print",
        "name": "print"
      },
      "printf": {
        "description": "Draws formatted text, with word wrap and alignment.\n\nSee additional notes in love.graphics.print.\n\nIn version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.",
        "snippet": "printf(${1:text}, ${2:x}, ${3:y}, ${4:limit}, ${5:align}, ${6:r}, ${7:sx}, ${8:sy}, ${9:ox}, ${10:oy}, ${11:kx}, ${12:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.printf",
        "name": "printf"
      },
      "push": {
        "description": "Copies and pushes the current coordinate transformation to the transformation stack.\n\nThis function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.",
        "snippet": "push(${1:stack})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.push",
        "name": "push"
      },
      "rectangle": {
        "description": "Draws a rectangle.",
        "snippet": "rectangle(${1:mode}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.rectangle",
        "name": "rectangle"
      },
      "replaceTransform": {
        "description": "Replaces the current coordinate transformation with the given Transform object.",
        "snippet": "replaceTransform(${1:transform})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.replaceTransform",
        "name": "replaceTransform"
      },
      "reset": {
        "description": "Resets the current graphics settings.\n\nCalling reset makes the current drawing color white, the current background color black, resets any active Canvas or Shader, and removes any scissor settings. It sets the BlendMode to alpha. It also sets both the point and line drawing modes to smooth and their sizes to 1.0.",
        "snippet": "reset()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.reset",
        "name": "reset"
      },
      "rotate": {
        "description": "Rotates the coordinate system in two dimensions.\n\nCalling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw exits.",
        "snippet": "rotate(${1:angle})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.rotate",
        "name": "rotate"
      },
      "scale": {
        "description": "Scales the coordinate system in two dimensions.\n\nBy default the coordinate system in L\u00d6VE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.\n\nAfter scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nScaling lasts until love.draw exits.",
        "snippet": "scale(${1:sx}, ${2:sy})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.scale",
        "name": "scale"
      },
      "setBackgroundColor": {
        "description": "Sets the background color.",
        "snippet": "setBackgroundColor(${1:r}, ${2:g}, ${3:b}, ${4:a})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setBackgroundColor",
        "name": "setBackgroundColor"
      },
      "setBlendMode": {
        "description": "Sets the blending mode.",
        "snippet": "setBlendMode(${1:mode})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setBlendMode",
        "name": "setBlendMode"
      },
      "setCanvas": {
        "description": "Captures drawing operations to a Canvas.",
        "snippet": "setCanvas(${1:canvas})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setCanvas",
        "name": "setCanvas"
      },
      "setColor": {
        "description": "Sets the color used for drawing.",
        "snippet": "setColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setColor",
        "name": "setColor"
      },
      "setColorMask": {
        "description": "Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if red is set to false, no further changes will be made to the red component of any pixels.\n\nEnables all color components when called without arguments.",
        "snippet": "setColorMask(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setColorMask",
        "name": "setColorMask"
      },
      "setDefaultFilter": {
        "description": "Sets the default scaling filters used with Images, Canvases, and Fonts.\n\nThis function does not apply retroactively to loaded images.",
        "snippet": "setDefaultFilter(${1:min}, ${2:mag}, ${3:anisotropy})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setDefaultFilter",
        "name": "setDefaultFilter"
      },
      "setDepthMode": {
        "description": "Configures depth testing and writing to the depth buffer.\n\nThis is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.",
        "snippet": "setDepthMode(${1:comparemode}, ${2:write})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setDepthMode",
        "name": "setDepthMode"
      },
      "setFont": {
        "description": "Set an already-loaded Font as the current font or create and load a new one from the file and size.\n\nIt's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage.",
        "snippet": "setFont(${1:font})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setFont",
        "name": "setFont"
      },
      "setFrontFaceWinding": {
        "description": "Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.",
        "snippet": "setFrontFaceWinding(${1:winding})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setFrontFaceWinding",
        "name": "setFrontFaceWinding"
      },
      "setLineJoin": {
        "description": "Sets the line join style.",
        "snippet": "setLineJoin(${1:join})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setLineJoin",
        "name": "setLineJoin"
      },
      "setLineStyle": {
        "description": "Sets the line style.",
        "snippet": "setLineStyle(${1:style})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setLineStyle",
        "name": "setLineStyle"
      },
      "setLineWidth": {
        "description": "Sets the line width.",
        "snippet": "setLineWidth(${1:width})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setLineWidth",
        "name": "setLineWidth"
      },
      "setMeshCullMode": {
        "description": "Sets whether back-facing triangles in a Mesh are culled.\n\nThis is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.",
        "snippet": "setMeshCullMode(${1:mode})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setMeshCullMode",
        "name": "setMeshCullMode"
      },
      "setNewFont": {
        "description": "Creates and sets a new font.",
        "snippet": "setNewFont(${1:filename}, ${2:size})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setNewFont",
        "name": "setNewFont"
      },
      "setPointSize": {
        "description": "Sets the point size.",
        "snippet": "setPointSize(${1:size})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setPointSize",
        "name": "setPointSize"
      },
      "setScissor": {
        "description": "Sets or disables scissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.",
        "snippet": "setScissor(${1:x}, ${2:y}, ${3:width}, ${4:height})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setScissor",
        "name": "setScissor"
      },
      "setShader": {
        "description": "Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next love.graphics.setShader will be drawn using the Shader object specified.\n\nDisables the shaders when called without arguments.",
        "snippet": "setShader()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setShader",
        "name": "setShader"
      },
      "setStencilTest": {
        "description": "Configures or disables stencil testing.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.\n\nEach Canvas has its own per-pixel stencil values.",
        "snippet": "setStencilTest(${1:comparemode}, ${2:comparevalue})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setStencilTest",
        "name": "setStencilTest"
      },
      "setWireframe": {
        "description": "Sets whether wireframe lines will be used when drawing.\n\nWireframe mode should only be used for debugging. The lines drawn with it enabled do not behave like regular love.graphics lines: their widths don't scale with the coordinate transformations or with love.graphics.setLineWidth, and they don't use the smooth LineStyle.",
        "snippet": "setWireframe(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.setWireframe",
        "name": "setWireframe"
      },
      "shear": {
        "description": "Shears the coordinate system.",
        "snippet": "shear(${1:kx}, ${2:ky})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.shear",
        "name": "shear"
      },
      "stencil": {
        "description": "Draws geometry as a stencil.\n\nThe geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil values of pixels can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel.\n\nEach Canvas has its own per-pixel stencil values. Stencil values are within the range of [0, 255].",
        "snippet": "stencil(${1:stencilfunction}, ${2:action}, ${3:value}, ${4:keepvalues})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.stencil",
        "name": "stencil"
      },
      "transformPoint": {
        "description": "Converts the given 2D position from global coordinates into screen-space.\n\nThis effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects.",
        "snippet": "transformPoint(${1:globalX}, ${2:globalY})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.transformPoint",
        "name": "transformPoint"
      },
      "translate": {
        "description": "Translates the coordinate system in two dimensions.\n\nWhen this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nThis change lasts until love.graphics.clear is called (which is called automatically before love.draw in the default love.run function), or a love.graphics.pop reverts to a previous coordinate system state.\n\nTranslating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.",
        "snippet": "translate(${1:dx}, ${2:dy})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.translate",
        "name": "translate"
      },
      "validateShader": {
        "description": "Validates shader code. Check if specificed shader code does not contain any errors.",
        "snippet": "validateShader(${1:gles}, ${2:code})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.graphics.validateShader",
        "name": "validateShader"
      }
    },
    "hasDeprecationOutput": {
      "description": "Gets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console.",
      "snippet": "hasDeprecationOutput()",
      "type": "function",
      "url": "https://love2d.org/wiki/love.hasDeprecationOutput",
      "name": "hasDeprecationOutput"
    },
    "image": {
      "isCompressed": {
        "description": "Determines whether a file can be loaded as CompressedImageData.",
        "snippet": "isCompressed(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.image.isCompressed",
        "name": "isCompressed"
      },
      "newCompressedData": {
        "description": "Create a new CompressedImageData object from a compressed image file. L\u00d6VE supports several compressed texture formats, enumerated in the CompressedImageFormat page.",
        "snippet": "newCompressedData(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.image.newCompressedData",
        "name": "newCompressedData"
      },
      "newImageData": {
        "description": "Create a new ImageData object.",
        "snippet": "newImageData(${1:width}, ${2:height})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.image.newImageData",
        "name": "newImageData"
      }
    },
    "joystick": {
      "getJoystickCount": {
        "description": "Gets the number of connected joysticks.",
        "snippet": "getJoystickCount()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.joystick.getJoystickCount",
        "name": "getJoystickCount"
      },
      "getJoysticks": {
        "description": "Gets a list of connected Joysticks.",
        "snippet": "getJoysticks()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.joystick.getJoysticks",
        "name": "getJoysticks"
      },
      "loadGamepadMappings": {
        "description": "Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.",
        "snippet": "loadGamepadMappings(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.joystick.loadGamepadMappings",
        "name": "loadGamepadMappings"
      },
      "saveGamepadMappings": {
        "description": "Saves the virtual gamepad mappings of all Joysticks that are recognized as gamepads and have either been recently used or their gamepad bindings have been modified.",
        "snippet": "saveGamepadMappings(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.joystick.saveGamepadMappings",
        "name": "saveGamepadMappings"
      },
      "setGamepadMapping": {
        "description": "Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for all Dualshock 3 controllers used with the game when run in OS X.\n\nL\u00d6VE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.\n\nThe virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.",
        "snippet": "setGamepadMapping(${1:guid}, ${2:button}, ${3:inputtype}, ${4:inputindex}, ${5:hatdirection})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.joystick.setGamepadMapping",
        "name": "setGamepadMapping"
      }
    },
    "keyboard": {
      "getKeyFromScancode": {
        "description": "Gets the key corresponding to the given hardware scancode.\n\nUnlike key constants, Scancodes are keyboard layout-independent. For example the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.",
        "snippet": "getKeyFromScancode(${1:scancode})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.getKeyFromScancode",
        "name": "getKeyFromScancode"
      },
      "getScancodeFromKey": {
        "description": "Gets the hardware scancode corresponding to the given key.\n\nUnlike key constants, Scancodes are keyboard layout-independent. For example the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.",
        "snippet": "getScancodeFromKey(${1:key})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.getScancodeFromKey",
        "name": "getScancodeFromKey"
      },
      "hasKeyRepeat": {
        "description": "Gets whether key repeat is enabled.",
        "snippet": "hasKeyRepeat()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.hasKeyRepeat",
        "name": "hasKeyRepeat"
      },
      "hasTextInput": {
        "description": "Gets whether text input events are enabled.",
        "snippet": "hasTextInput()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.hasTextInput",
        "name": "hasTextInput"
      },
      "isDown": {
        "description": "Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.",
        "snippet": "isDown(${1:key})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.isDown",
        "name": "isDown"
      },
      "isScancodeDown": {
        "description": "Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.\n\nUnlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode \"w\" is used if the key in the same place as the \"w\" key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.",
        "snippet": "isScancodeDown(${1:scancode}, ${2:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.isScancodeDown",
        "name": "isScancodeDown"
      },
      "setKeyRepeat": {
        "description": "Enables or disables key repeat. It is disabled by default.\n\nThe interval between repeats depends on the user's system settings.",
        "snippet": "setKeyRepeat(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.setKeyRepeat",
        "name": "setKeyRepeat"
      },
      "setTextInput": {
        "description": "Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.",
        "snippet": "setTextInput(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.keyboard.setTextInput",
        "name": "setTextInput"
      }
    },
    "math": {
      "compress": {
        "description": "Compresses a string or data using a specific compression algorithm.",
        "snippet": "compress(${1:rawstring}, ${2:format}, ${3:level})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.compress",
        "name": "compress"
      },
      "decompress": {
        "description": "Decompresses a CompressedData or previously compressed string or Data object.",
        "snippet": "decompress(${1:compressedData})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.decompress",
        "name": "decompress"
      },
      "gammaToLinear": {
        "description": "Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where L\u00d6VE doesn't handle conversions automatically.",
        "snippet": "gammaToLinear(${1:r}, ${2:g}, ${3:b})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.gammaToLinear",
        "name": "gammaToLinear"
      },
      "getRandomSeed": {
        "description": "Gets the seed of the random number generator.\n\nThe state is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53.",
        "snippet": "getRandomSeed()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.getRandomSeed",
        "name": "getRandomSeed"
      },
      "getRandomState": {
        "description": "Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.\n\nThe value of the state string does not depend on the current operating system.",
        "snippet": "getRandomState()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.getRandomState",
        "name": "getRandomState"
      },
      "isConvex": {
        "description": "Checks whether a polygon is convex.\n\nPolygonShapes in love.physics, some forms of Mesh, and polygons drawn with love.graphics.polygon must be simple convex polygons.",
        "snippet": "isConvex(${1:vertices})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.isConvex",
        "name": "isConvex"
      },
      "linearToGamma": {
        "description": "Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.\n\nIn general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.",
        "snippet": "linearToGamma(${1:lr}, ${2:lg}, ${3:lb})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.linearToGamma",
        "name": "linearToGamma"
      },
      "newBezierCurve": {
        "description": "Creates a new BezierCurve object.\n\nThe number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) B\u00e9zier curve, four vertices define a cubic (degree 3) B\u00e9zier curve, etc.",
        "snippet": "newBezierCurve(${1:vertices})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.newBezierCurve",
        "name": "newBezierCurve"
      },
      "newRandomGenerator": {
        "description": "Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.",
        "snippet": "newRandomGenerator()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.newRandomGenerator",
        "name": "newRandomGenerator"
      },
      "newTransform": {
        "description": "Creates a new Transform object.",
        "snippet": "newTransform()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.newTransform",
        "name": "newTransform"
      },
      "noise": {
        "description": "Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.\n\nSimplex noise is closely related to Perlin noise. It is widely used for procedural content generation.\n\nThere are many webpages which discuss Perlin and Simplex noise in detail.",
        "snippet": "noise(${1:x})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.noise",
        "name": "noise"
      },
      "random": {
        "description": "Generates a pseudo-random number in a platform independent manner.",
        "snippet": "random()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.random",
        "name": "random"
      },
      "randomNormal": {
        "description": "Get a normally distributed pseudo random number.",
        "snippet": "randomNormal(${1:stddev}, ${2:mean})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.randomNormal",
        "name": "randomNormal"
      },
      "setRandomSeed": {
        "description": "Sets the seed of the random number generator using the specified integer number.",
        "snippet": "setRandomSeed(${1:seed})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.setRandomSeed",
        "name": "setRandomSeed"
      },
      "setRandomState": {
        "description": "Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.\n\nThe value of the state string does not depend on the current operating system.",
        "snippet": "setRandomState(${1:state})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.setRandomState",
        "name": "setRandomState"
      },
      "triangulate": {
        "description": "Triangulate a simple polygon.",
        "snippet": "triangulate(${1:polygon})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.math.triangulate",
        "name": "triangulate"
      }
    },
    "mouse": {
      "getCursor": {
        "description": "Gets the current Cursor.",
        "snippet": "getCursor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getCursor",
        "name": "getCursor"
      },
      "getPosition": {
        "description": "Returns the current position of the mouse.",
        "snippet": "getPosition()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getPosition",
        "name": "getPosition"
      },
      "getRelativeMode": {
        "description": "Gets whether relative mode is enabled for the mouse.\n\nIf relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.",
        "snippet": "getRelativeMode()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getRelativeMode",
        "name": "getRelativeMode"
      },
      "getSystemCursor": {
        "description": "Gets a Cursor object representing a system-native hardware cursor.\n\n Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.",
        "snippet": "getSystemCursor(${1:ctype})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getSystemCursor",
        "name": "getSystemCursor"
      },
      "getX": {
        "description": "Returns the current x position of the mouse.",
        "snippet": "getX()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getX",
        "name": "getX"
      },
      "getY": {
        "description": "Returns the current y position of the mouse.",
        "snippet": "getY()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.getY",
        "name": "getY"
      },
      "hasCursor": {
        "description": "Gets whether cursor functionality is supported.\n\nIf it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.",
        "snippet": "hasCursor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.hasCursor",
        "name": "hasCursor"
      },
      "isCursorSupported": {
        "description": "Gets whether cursor functionality is supported.\n\nIf it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.",
        "snippet": "isCursorSupported()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.isCursorSupported",
        "name": "isCursorSupported"
      },
      "isDown": {
        "description": "Checks whether a certain mouse button is down. This function does not detect mousewheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that.",
        "snippet": "isDown(${1:button}, ${2:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.isDown",
        "name": "isDown"
      },
      "isGrabbed": {
        "description": "Checks if the mouse is grabbed.",
        "snippet": "isGrabbed()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.isGrabbed",
        "name": "isGrabbed"
      },
      "isVisible": {
        "description": "Checks if the cursor is visible.",
        "snippet": "isVisible()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.isVisible",
        "name": "isVisible"
      },
      "newCursor": {
        "description": "Creates a new hardware Cursor object from an image file or ImageData.\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.\n\nThe hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.",
        "snippet": "newCursor(${1:imageData}, ${2:hotx}, ${3:hoty})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.newCursor",
        "name": "newCursor"
      },
      "setCursor": {
        "description": "Sets the current mouse cursor.\n\nResets the current mouse cursor to the default when called without arguments.",
        "snippet": "setCursor()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setCursor",
        "name": "setCursor"
      },
      "setGrabbed": {
        "description": "Grabs the mouse and confines it to the window.",
        "snippet": "setGrabbed(${1:grab})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setGrabbed",
        "name": "setGrabbed"
      },
      "setPosition": {
        "description": "Sets the current position of the mouse. Non-integer values are floored.",
        "snippet": "setPosition(${1:x}, ${2:y})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setPosition",
        "name": "setPosition"
      },
      "setRelativeMode": {
        "description": "Sets whether relative mode is enabled for the mouse.\n\nWhen relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.",
        "snippet": "setRelativeMode(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setRelativeMode",
        "name": "setRelativeMode"
      },
      "setVisible": {
        "description": "Sets the visibility of the cursor.",
        "snippet": "setVisible(${1:visible})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setVisible",
        "name": "setVisible"
      },
      "setX": {
        "description": "Sets the current X position of the mouse. Non-integer values are floored.",
        "snippet": "setX(${1:x})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setX",
        "name": "setX"
      },
      "setY": {
        "description": "Sets the current Y position of the mouse. Non-integer values are floored.",
        "snippet": "setY(${1:y})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.mouse.setY",
        "name": "setY"
      }
    },
    "physics": {
      "getDistance": {
        "description": "Returns the two closest points between two fixtures and their distance.",
        "snippet": "getDistance(${1:fixture1}, ${2:fixture2})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.getDistance",
        "name": "getDistance"
      },
      "getMeter": {
        "description": "Get the scale of the world.\n\nThe world scale is the number of pixels per meter. Try to keep your shape sizes less than 10 times this scale.\n\nThis is important because the physics in Box2D is tuned to work well for objects of size 0.1m up to 10m. All physics coordinates are divided by this number for the physics calculations.",
        "snippet": "getMeter()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.getMeter",
        "name": "getMeter"
      },
      "newBody": {
        "description": "Creates a new body.\n\nThere are three types of bodies. Static bodies do not move, have a infinite mass, and can be used for level boundaries. Dynamic bodies are the main actors in the simulation, they collide with everything. Kinematic bodies do not react to forces and only collide with dynamic bodies.\n\nThe mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.",
        "snippet": "newBody(${1:world}, ${2:x}, ${3:y}, ${4:type})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newBody",
        "name": "newBody"
      },
      "newChainShape": {
        "description": "Creates a new ChainShape.",
        "snippet": "newChainShape(${1:loop}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newChainShape",
        "name": "newChainShape"
      },
      "newCircleShape": {
        "description": "Creates a new CircleShape.",
        "snippet": "newCircleShape(${1:radius})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newCircleShape",
        "name": "newCircleShape"
      },
      "newDistanceJoint": {
        "description": "Create a distance joint between two bodies.\n\nThis joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.",
        "snippet": "newDistanceJoint(${1:body1}, ${2:body2}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newDistanceJoint",
        "name": "newDistanceJoint"
      },
      "newEdgeShape": {
        "description": "Creates a edge shape.",
        "snippet": "newEdgeShape(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newEdgeShape",
        "name": "newEdgeShape"
      },
      "newFixture": {
        "description": "Creates and attaches a Fixture to a body.",
        "snippet": "newFixture(${1:body}, ${2:shape}, ${3:density})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newFixture",
        "name": "newFixture"
      },
      "newFrictionJoint": {
        "description": "Create a friction joint between two bodies. A FrictionJoint applies friction to a body.",
        "snippet": "newFrictionJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newFrictionJoint",
        "name": "newFrictionJoint"
      },
      "newGearJoint": {
        "description": "Create a gear joint connecting two joints.\n\nThe gear joint connects two joints that must be either prismatic or revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.\n\nThe gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.",
        "snippet": "newGearJoint(${1:joint1}, ${2:joint2}, ${3:ratio}, ${4:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newGearJoint",
        "name": "newGearJoint"
      },
      "newMotorJoint": {
        "description": "Creates a joint between two bodies which controls the relative motion between them.\n\nPosition and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.",
        "snippet": "newMotorJoint(${1:body1}, ${2:body2}, ${3:correctionFactor})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newMotorJoint",
        "name": "newMotorJoint"
      },
      "newMouseJoint": {
        "description": "Create a joint between a body and the mouse.\n\nThis joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).\n\nThe advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine.",
        "snippet": "newMouseJoint(${1:body}, ${2:x}, ${3:y})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newMouseJoint",
        "name": "newMouseJoint"
      },
      "newPolygonShape": {
        "description": "Creates a new PolygonShape.\n\nThis shape can have 8 vertices at most, and must form a convex shape.",
        "snippet": "newPolygonShape(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newPolygonShape",
        "name": "newPolygonShape"
      },
      "newPrismaticJoint": {
        "description": "Create a prismatic joints between two bodies.\n\nA prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a revolute joint, but with translation and force substituted for angle and torque.",
        "snippet": "newPrismaticJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:ax}, ${6:ay}, ${7:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newPrismaticJoint",
        "name": "newPrismaticJoint"
      },
      "newPulleyJoint": {
        "description": "Create a pulley joint to join two bodies to each other and the ground.\n\nThe pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.\n\nPulley joints can behave unpredictably if one side is fully extended. It is recommended that the method setMaxLengths  be used to constrain the maximum lengths each side can attain.",
        "snippet": "newPulleyJoint(${1:body1}, ${2:body2}, ${3:gx1}, ${4:gy1}, ${5:gx2}, ${6:gy2}, ${7:x1}, ${8:y1}, ${9:x2}, ${10:y2}, ${11:ratio}, ${12:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newPulleyJoint",
        "name": "newPulleyJoint"
      },
      "newRectangleShape": {
        "description": "Shorthand for creating rectangular PolygonShapes.\n\nBy default, the local origin is located at the center of the rectangle as opposed to the top left for graphics.",
        "snippet": "newRectangleShape(${1:width}, ${2:height})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newRectangleShape",
        "name": "newRectangleShape"
      },
      "newRevoluteJoint": {
        "description": "Creates a pivot joint between two bodies.\n\nThis joint connects two bodies to a point around which they can pivot.",
        "snippet": "newRevoluteJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newRevoluteJoint",
        "name": "newRevoluteJoint"
      },
      "newRopeJoint": {
        "description": "Create a joint between two bodies. Its only function is enforcing a max distance between these bodies.",
        "snippet": "newRopeJoint(${1:body1}, ${2:body2}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:maxLength}, ${8:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newRopeJoint",
        "name": "newRopeJoint"
      },
      "newWeldJoint": {
        "description": "Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.",
        "snippet": "newWeldJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newWeldJoint",
        "name": "newWeldJoint"
      },
      "newWheelJoint": {
        "description": "Creates a wheel joint.",
        "snippet": "newWheelJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:ax}, ${6:ay}, ${7:collideConnected})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newWheelJoint",
        "name": "newWheelJoint"
      },
      "newWorld": {
        "description": "Creates a new World.",
        "snippet": "newWorld(${1:xg}, ${2:yg}, ${3:sleep})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.newWorld",
        "name": "newWorld"
      },
      "setMeter": {
        "description": "Sets the pixels to meter scale factor.\n\nAll coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.\n\nlove.physics.setMeter does not apply retroactively to created objects. Created objects retain their meter coordinates but the scale factor will affect their pixel coordinates.",
        "snippet": "setMeter(${1:scale})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.physics.setMeter",
        "name": "setMeter"
      }
    },
    "setDeprecationOutput": {
      "description": "Sets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console.",
      "snippet": "setDeprecationOutput(${1:enable})",
      "type": "function",
      "url": "https://love2d.org/wiki/love.setDeprecationOutput",
      "name": "setDeprecationOutput"
    },
    "sound": {
      "newDecoder": {
        "description": "Attempts to find a decoder for the encoded sound data in the specified file.",
        "snippet": "newDecoder(${1:file}, ${2:buffer})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.sound.newDecoder",
        "name": "newDecoder"
      },
      "newSoundData": {
        "description": "Creates new SoundData from a file. It's also possible to create SoundData with a custom sample rate, channel and bit depth.\n\nThe sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.",
        "snippet": "newSoundData(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.sound.newSoundData",
        "name": "newSoundData"
      }
    },
    "system": {
      "getClipboardText": {
        "description": "Gets text from the clipboard.",
        "snippet": "getClipboardText()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.getClipboardText",
        "name": "getClipboardText"
      },
      "getOS": {
        "description": "Gets the current operating system. In general, L\u00d6VE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)",
        "snippet": "getOS()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.getOS",
        "name": "getOS"
      },
      "getPowerInfo": {
        "description": "Gets information about the system's power supply.",
        "snippet": "getPowerInfo()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.getPowerInfo",
        "name": "getPowerInfo"
      },
      "getProcessorCount": {
        "description": "Gets the amount of logical processor in the system.",
        "snippet": "getProcessorCount()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.getProcessorCount",
        "name": "getProcessorCount"
      },
      "openURL": {
        "description": "Opens a URL with the user's web or file browser.",
        "snippet": "openURL(${1:url})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.openURL",
        "name": "openURL"
      },
      "setClipboardText": {
        "description": "Puts text in the clipboard.",
        "snippet": "setClipboardText(${1:text})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.setClipboardText",
        "name": "setClipboardText"
      },
      "vibrate": {
        "description": "Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.",
        "snippet": "vibrate(${1:seconds})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.system.vibrate",
        "name": "vibrate"
      }
    },
    "thread": {
      "getChannel": {
        "description": "Creates or retrieves a named thread channel.",
        "snippet": "getChannel(${1:name})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.thread.getChannel",
        "name": "getChannel"
      },
      "newChannel": {
        "description": "Create a new unnamed thread channel.\n\nOne use for them is to pass new unnamed channels to other threads via Channel:push",
        "snippet": "newChannel()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.thread.newChannel",
        "name": "newChannel"
      },
      "newThread": {
        "description": "Creates a new Thread from a File or Data object.",
        "snippet": "newThread(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.thread.newThread",
        "name": "newThread"
      }
    },
    "timer": {
      "getAverageDelta": {
        "description": "Returns the average delta time (seconds per frame) over the last second.",
        "snippet": "getAverageDelta()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.getAverageDelta",
        "name": "getAverageDelta"
      },
      "getDelta": {
        "description": "Returns the time between the last two frames.",
        "snippet": "getDelta()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.getDelta",
        "name": "getDelta"
      },
      "getFPS": {
        "description": "Returns the current frames per second.",
        "snippet": "getFPS()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.getFPS",
        "name": "getFPS"
      },
      "getTime": {
        "description": "Returns the value of a timer with an unspecified starting time. This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.",
        "snippet": "getTime()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.getTime",
        "name": "getTime"
      },
      "sleep": {
        "description": "Sleeps the program for the specified amount of time.",
        "snippet": "sleep(${1:s})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.sleep",
        "name": "sleep"
      },
      "step": {
        "description": "Measures the time between two frames. Calling this changes the return value of love.timer.getDelta.",
        "snippet": "step()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.timer.step",
        "name": "step"
      }
    },
    "touch": {
      "getPosition": {
        "description": "Gets the current position of the specified touch-press, in pixels.",
        "snippet": "getPosition(${1:id})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.touch.getPosition",
        "name": "getPosition"
      },
      "getPressure": {
        "description": "Gets the current pressure of the specified touch-press.",
        "snippet": "getPressure(${1:id})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.touch.getPressure",
        "name": "getPressure"
      },
      "getTouches": {
        "description": "Gets a list of all active touch-presses.",
        "snippet": "getTouches()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.touch.getTouches",
        "name": "getTouches"
      }
    },
    "video": {
      "newVideoStream": {
        "description": "Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.",
        "snippet": "newVideoStream(${1:filename})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.video.newVideoStream",
        "name": "newVideoStream"
      }
    },
    "window": {
      "close": {
        "description": "Closes the window. It can be reopened with love.window.setMode.",
        "snippet": "close()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.close",
        "name": "close"
      },
      "fromPixels": {
        "description": "Converts a number from pixels to density-independent units.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.\n\nThis function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units.",
        "snippet": "fromPixels(${1:pixelvalue})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.fromPixels",
        "name": "fromPixels"
      },
      "getDPIScale": {
        "description": "Gets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.\n\nThe love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.\n\nThe highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.",
        "snippet": "getDPIScale()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getDPIScale",
        "name": "getDPIScale"
      },
      "getDisplayName": {
        "description": "Gets the name of a display.",
        "snippet": "getDisplayName(${1:displayindex})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getDisplayName",
        "name": "getDisplayName"
      },
      "getFullscreen": {
        "description": "Gets whether the window is fullscreen.",
        "snippet": "getFullscreen()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getFullscreen",
        "name": "getFullscreen"
      },
      "getFullscreenModes": {
        "description": "Gets a list of supported fullscreen modes.",
        "snippet": "getFullscreenModes(${1:display})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getFullscreenModes",
        "name": "getFullscreenModes"
      },
      "getIcon": {
        "description": "Gets the window icon.",
        "snippet": "getIcon()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getIcon",
        "name": "getIcon"
      },
      "getMode": {
        "description": "Returns the current display mode.",
        "snippet": "getMode()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getMode",
        "name": "getMode"
      },
      "getPixelScale": {
        "description": "Gets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getPixelScale() would return 2.0 in that case.\n\nThe love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.\n\nThe highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.",
        "snippet": "getPixelScale()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getPixelScale",
        "name": "getPixelScale"
      },
      "getPosition": {
        "description": "Gets the position of the window on the screen.\n\nThe window position is in the coordinate space of the display it is currently in.",
        "snippet": "getPosition()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getPosition",
        "name": "getPosition"
      },
      "getTitle": {
        "description": "Gets the window title.",
        "snippet": "getTitle()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.getTitle",
        "name": "getTitle"
      },
      "hasFocus": {
        "description": "Checks if the game window has keyboard focus.",
        "snippet": "hasFocus()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.hasFocus",
        "name": "hasFocus"
      },
      "hasMouseFocus": {
        "description": "Checks if the game window has mouse focus.",
        "snippet": "hasMouseFocus()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.hasMouseFocus",
        "name": "hasMouseFocus"
      },
      "isDisplaySleepEnabled": {
        "description": "Gets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.",
        "snippet": "isDisplaySleepEnabled()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.isDisplaySleepEnabled",
        "name": "isDisplaySleepEnabled"
      },
      "isMaximized": {
        "description": "Gets whether the Window is currently maximized.\n\nThe window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.",
        "snippet": "isMaximized()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.isMaximized",
        "name": "isMaximized"
      },
      "isMinimized": {
        "description": "Gets whether the Window is currently minimized.",
        "snippet": "isMinimized()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.isMinimized",
        "name": "isMinimized"
      },
      "isOpen": {
        "description": "Checks if the window is open.",
        "snippet": "isOpen()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.isOpen",
        "name": "isOpen"
      },
      "isVisible": {
        "description": "Checks if the game window is visible.\n\nThe window is considered visible if it's not minimized and the program isn't hidden.",
        "snippet": "isVisible()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.isVisible",
        "name": "isVisible"
      },
      "maximize": {
        "description": "Makes the window as large as possible.\n\nThis function has no effect if the window isn't resizable, since it essentially programmatically presses the window's \"maximize\" button.",
        "snippet": "maximize()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.maximize",
        "name": "maximize"
      },
      "minimize": {
        "description": "Minimizes the window to the system's task bar / dock.",
        "snippet": "minimize()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.minimize",
        "name": "minimize"
      },
      "requestAttention": {
        "description": "Causes the window to request the attention of the user if it is not in the foreground.\n\nIn Windows the taskbar icon will flash, and in OS X the dock icon will bounce.",
        "snippet": "requestAttention(${1:continuous})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.requestAttention",
        "name": "requestAttention"
      },
      "restore": {
        "description": "Restores the size and position of the window if it was minimized or maximized.",
        "snippet": "restore()",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.restore",
        "name": "restore"
      },
      "setDisplaySleepEnabled": {
        "description": "Sets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.",
        "snippet": "setDisplaySleepEnabled(${1:enable})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setDisplaySleepEnabled",
        "name": "setDisplaySleepEnabled"
      },
      "setFullscreen": {
        "description": "Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.\n\nIf fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function.",
        "snippet": "setFullscreen(${1:fullscreen})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setFullscreen",
        "name": "setFullscreen"
      },
      "setIcon": {
        "description": "Sets the window icon until the game is quit. Not all operating systems support very large icon images.",
        "snippet": "setIcon(${1:imagedata})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setIcon",
        "name": "setIcon"
      },
      "setMode": {
        "description": "Sets the display mode and properties of the window.\n\nIf width or height is 0, setMode will use the width and height of the desktop.\n\nChanging the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with Shader:send will be erased. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.",
        "snippet": "setMode(${1:width}, ${2:height}, ${3:flags})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setMode",
        "name": "setMode"
      },
      "setPosition": {
        "description": "Sets the position of the window on the screen.\n\nThe window position is in the coordinate space of the specified display.",
        "snippet": "setPosition(${1:x}, ${2:y}, ${3:display})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setPosition",
        "name": "setPosition"
      },
      "setTitle": {
        "description": "Sets the window title.",
        "snippet": "setTitle(${1:title})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.setTitle",
        "name": "setTitle"
      },
      "showMessageBox": {
        "description": "Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.",
        "snippet": "showMessageBox(${1:title}, ${2:message}, ${3:type}, ${4:attachtowindow})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.showMessageBox",
        "name": "showMessageBox"
      },
      "toPixels": {
        "description": "Converts a number from density-independent units to pixels.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.\n\nThis is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units.",
        "snippet": "toPixels(${1:value})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.toPixels",
        "name": "toPixels"
      },
      "updateMode": {
        "description": "Sets the display mode and properties of the window, without modifying unspecified properties.\n\nIf width or height is 0, updateMode will use the width and height of the desktop.\n\nChanging the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.",
        "snippet": "updateMode(${1:width}, ${2:height}, ${3:settings})",
        "type": "function",
        "url": "https://love2d.org/wiki/love.window.updateMode",
        "name": "updateMode"
      }
    }
  }
}